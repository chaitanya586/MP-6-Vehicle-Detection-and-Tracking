pip install yolov5
!git clone https://github.com/ultralytics/yolov5  # clone
%cd yolov5
%pip install -qr requirements.txt comet_ml  # install

import torch
import utils
display = utils.notebook_init()  # checks

import cv2
import torch
from yolov5 import YOLOv5

!python segment/predict.py --weights yolov5s-seg.pt --img 640 --conf 0.25 --source data/images
#display.Image(filename='runs/predict-seg/exp/zidane.jpg', width=600)

# Ultralytics YOLO ðŸš€, AGPL-3.0 license

__version__ = "8.1.29"

from ultralytics.data.explorer.explorer import Explorer
from ultralytics.models import RTDETR, SAM, YOLO, YOLOWorld
from ultralytics.models.fastsam import FastSAM
from ultralytics.models.nas import NAS
from ultralytics.utils import ASSETS, SETTINGS as settings
from ultralytics.utils.checks import check_yolo as checks
from ultralytics.utils.downloads import download

__all__ = (
    "__version__",
    "ASSETS",
    "YOLO",
    "YOLOWorld",
    "NAS",
    "SAM",
    "FastSAM",
    "RTDETR",
    "checks",
    "download",
    "settings",
    "Explorer",
)

import cv2
import numpy as np

from yolov5 import YOLOv5

# Initialize the YOLOv5 object detector
model = YOLOv5('yolov5s.pt')  # Only load weights file, no need for .yaml file

# Continue with the rest of your code...

from google.colab import files

# Download the output video file
files.download('output_video.avi')

from google.colab.patches import cv2_imshow
import cv2
from yolov5 import YOLOv5
from IPython.display import HTML
from base64 import b64encode

# Define class names (replace with your own if different)
class_names = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush']

# Initialize the YOLOv5 object detector
model = YOLOv5('yolov5s.pt')  # Assuming you have yolov5s.pt in the current directory

# Initialize the video capture object
cap = cv2.VideoCapture('/content/mp 6 video.mp4')

# Set up some parameters
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)
fourcc = cv2.VideoWriter_fourcc(*'XVID')

# Initialize the video writer object
out = cv2.VideoWriter('output_video.avi', fourcc, fps, (frame_width, frame_height))

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Perform object detection on the frame using YOLOv5
    results = model.predict(frame)

    # Process the detections and draw bounding boxes
    for det in results.xyxy[0]:
        x1, y1, x2, y2, conf, cls = det
        class_name = class_names[int(cls)]
        cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
        cv2.putText(frame, f"{class_name} ({conf:.2f})", (int(x1), int(y1 - 5)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Write the output frame to the output video file
    out.write(frame)

    # Display the output frame
    cv2_imshow(frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and video writer objects
cap.release()
out.release()

# Encode the output video file as base64
with open('output_video.avi', 'rb') as f:
    video_data = b64encode(f.read()).decode('ascii')

# Create HTML to embed the video in the output
video_html = f"""
<video controls>
  <source src="data:video/x-msvideo;base64,{video_data}" type="video/avi">
  Your browser does not support the video tag.
</video>
"""

# Display the HTML to download the video
HTML(video_html)
